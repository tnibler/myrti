# set up sqlx development databases for typechecking
sqlx:
  cd server/core && \
  cargo sqlx database drop -y && \
  cargo sqlx database create && \
  cargo sqlx migrate run

  cd server/geocode && \
  cargo sqlx database drop -y && \
  cargo sqlx database create && \
  cargo sqlx migrate run

# create '.env' files setting sqlx DATABASE_URL variables
sqlx-env:
  #!/usr/bin/bash
  dir=`pwd`
  echo "DATABASE_URL=sqlite://${dir}/server/core/devel.db" > server/core/.env
  echo "DATABASE_URL=sqlite://${dir}/server/geocode/devel.db" > server/geocode/.env

# generate OpenApi spec and TS client from rust server
openapi:
  cd server && \
  cargo run --bin print-openapi > openapi.json && \
  cd ../web && pnpm openapi-zod-client ../server/openapi.json -o src/lib/apiclient.ts

# check that server/openapi.json matches output of print-openapi binary and web/src/lib/apiclient.ts matches output generated by openapi-zod-client from openapi.json
check-openapi:
  #!/usr/bin/bash
  tmpfile=`mktemp`
  cd web && pnpm openapi-zod-client ../server/openapi.json -o $tmpfile && cd ..
  diff server/openapi.json <(cd server && cargo run --bin print-openapi) || echo "MISMATCH"
  diff web/src/lib/apiclient.ts $tmpfile || echo "MISMATCH"
