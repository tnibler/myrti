/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * myrti
 * OpenAPI spec version: 0.1.0
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';
export type GetTimelineParams = {
  lastAssetId?: AssetId | null;
  maxCount: number;
  lastFetch?: string | null;
};

/**
 * @nullable
 */
export type DeleteAlbumItems200 = unknown | null;

export interface Video {
  hasDash: boolean;
}

export type TimelineSegmentAllOf = {
  assets: AssetWithSpe[];
  sortDate: string;
};

export type TimelineSegment = SegmentType & TimelineSegmentAllOf;

export interface TimelineSegmentsResponse {
  segments: TimelineSegment[];
}

export interface TimelineSection {
  avgAspectRatio: number;
  /** date of *oldest* asset in range */
  endDate: string;
  id: string;
  numAssets: number;
  /** date of *most recent* asset in range */
  startDate: string;
}

export interface TimelineSectionsResponse {
  sections: TimelineSection[];
}

export type TimelineGroupTypeOneOfThreeType =
  (typeof TimelineGroupTypeOneOfThreeType)[keyof typeof TimelineGroupTypeOneOfThreeType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TimelineGroupTypeOneOfThreeType = {
  group: 'group',
} as const;

export type TimelineGroupTypeOneOfThree = {
  groupEndDate: string;
  groupId: string;
  groupStartDate: string;
  groupTitle: string;
  type: TimelineGroupTypeOneOfThreeType;
};

export type TimelineGroupTypeOneOfType =
  (typeof TimelineGroupTypeOneOfType)[keyof typeof TimelineGroupTypeOneOfType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TimelineGroupTypeOneOfType = {
  day: 'day',
} as const;

export type TimelineGroupTypeOneOf = {
  date: string;
  type: TimelineGroupTypeOneOfType;
};

export type TimelineGroupType = TimelineGroupTypeOneOf | TimelineGroupTypeOneOfThree;

export type TimelineGroupId = string;

/**
 * Response for a request for the next part of the timeline to display

`groups` are always whole, not sliced in the middle. Either TimelineGroup or Day
`date` is the date before queries are made
 */
export interface TimelineChunk {
  changedSinceLastFetch: boolean;
  date: string;
  groups: TimelineGroup[];
}

export type ThumbnailSize = (typeof ThumbnailSize)[keyof typeof ThumbnailSize];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ThumbnailSize = {
  small: 'small',
  large: 'large',
} as const;

export type ThumbnailFormat = (typeof ThumbnailFormat)[keyof typeof ThumbnailFormat];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ThumbnailFormat = {
  avif: 'avif',
  webp: 'webp',
} as const;

export interface SetAssetRotationRequest {
  /** @nullable */
  rotation?: number | null;
}

export type SegmentTypeOneOfThreeType =
  (typeof SegmentTypeOneOfThreeType)[keyof typeof SegmentTypeOneOfThreeType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SegmentTypeOneOfThreeType = {
  userGroup: 'userGroup',
} as const;

export type SegmentTypeOneOfThree = {
  id: TimelineGroupId;
  /** @nullable */
  name?: string | null;
  type: SegmentTypeOneOfThreeType;
};

export type SegmentType = SegmentTypeOneOf | SegmentTypeOneOfThree;

export type SegmentTypeOneOfType = (typeof SegmentTypeOneOfType)[keyof typeof SegmentTypeOneOfType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SegmentTypeOneOfType = {
  dateRange: 'dateRange',
} as const;

export type SegmentTypeOneOf = {
  end: string;
  start: string;
  type: SegmentTypeOneOfType;
};

export type ImageRepresentationId = string;

export interface ImageRepresentation {
  format: string;
  height: number;
  id: string;
  size: number;
  width: number;
}

export interface Image {
  representations: ImageRepresentation[];
}

export type HideAssetAction = (typeof HideAssetAction)[keyof typeof HideAssetAction];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HideAssetAction = {
  hide: 'hide',
  unhide: 'unhide',
} as const;

export interface HideAssetsRequest {
  assetIds: AssetId[];
  what: HideAssetAction;
}

export interface DeleteAlbumItemRequest {
  itemIds: AlbumItemId[];
}

export interface CreateTimelineGroupResponse {
  displayDate: string;
  timelineGroupId: TimelineGroupId;
}

export interface CreateAlbumResponse {
  albumId: number;
}

export type AssetWithSpeAllOf = { [key: string]: unknown };

export type AssetType = (typeof AssetType)[keyof typeof AssetType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AssetType = {
  image: 'image',
  video: 'video',
} as const;

export type AssetSpe = Image | Video;

export type AssetWithSpe = Asset & AssetSpe & AssetWithSpeAllOf;

export type TimelineGroupAllOf = {
  assets: AssetWithSpe[];
};

export type TimelineGroup = TimelineGroupType & TimelineGroupAllOf;

export type AssetRootDirId = string;

export type AssetId = string;

export interface CreateTimelineGroupRequest {
  assets: AssetId[];
  name: string;
}

export interface CreateAlbumRequest {
  assets: AssetId[];
  /** @nullable */
  description?: string | null;
  name: string;
}

export interface AssetDetailsResponse {
  exiftoolOutput: unknown;
}

export interface Asset {
  addedAt: string;
  assetRootId: AssetRootDirId;
  assetType: AssetType;
  height: number;
  id: AssetId;
  mimeType: string;
  pathInRoot: string;
  /** @nullable */
  rotationCorrection?: number | null;
  takenDate: string;
  width: number;
}

export interface AppendAssetsResponse {
  success: boolean;
}

export interface AppendAssetsRequest {
  assetIds: AssetId[];
}

export type AlbumItemTypeOneOfThreeItemType =
  (typeof AlbumItemTypeOneOfThreeItemType)[keyof typeof AlbumItemTypeOneOfThreeItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AlbumItemTypeOneOfThreeItemType = {
  text: 'text',
} as const;

export type AlbumItemTypeOneOfThree = {
  itemType: AlbumItemTypeOneOfThreeItemType;
  text: string;
};

export type AlbumItemType = AlbumItemTypeOneOf | AlbumItemTypeOneOfThree;

export type AlbumItemTypeOneOfItemType =
  (typeof AlbumItemTypeOneOfItemType)[keyof typeof AlbumItemTypeOneOfItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AlbumItemTypeOneOfItemType = {
  asset: 'asset',
} as const;

export type AlbumItemTypeOneOf = {
  asset: AssetWithSpe;
  itemType: AlbumItemTypeOneOfItemType;
};

export type AlbumItemId = string;

export type AlbumItemAllOf = {
  itemId: AlbumItemId;
};

export type AlbumItem = AlbumItemType & AlbumItemAllOf;

export type AlbumId = string;

export interface AlbumDetailsResponse {
  /** @nullable */
  description?: string | null;
  items: AlbumItem[];
  /** @nullable */
  name?: string | null;
}

export interface Album {
  changedAt: string;
  createdAt: string;
  /** @nullable */
  description?: string | null;
  id: AlbumId;
  /** @nullable */
  name?: string | null;
  numAssets: number;
}

export interface AddToTimelineGroupRequest {
  assets: AssetId[];
  groupId: TimelineGroupId;
}

export const getAllAlbums = <TData = AxiosResponse<Album[]>>(
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/api/albums`, options);
};

export const createAlbum = <TData = AxiosResponse<CreateAlbumResponse>>(
  createAlbumRequest: CreateAlbumRequest,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/api/albums`, createAlbumRequest, options);
};

export const getAlbumDetails = <TData = AxiosResponse<AlbumDetailsResponse>>(
  id: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/api/albums/${id}`, options);
};

export const appendAssetsToAlbum = <TData = AxiosResponse<AppendAssetsResponse>>(
  id: string,
  appendAssetsRequest: AppendAssetsRequest,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.put(`/api/albums/${id}/assets`, appendAssetsRequest, options);
};

export const deleteAlbumItems = <TData = AxiosResponse<DeleteAlbumItems200>>(
  id: string,
  deleteAlbumItemRequest: DeleteAlbumItemRequest,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/api/albums/${id}/deleteItems`, deleteAlbumItemRequest, options);
};

export const getAlbumThumbnail = <TData = AxiosResponse<string>>(
  id: AlbumId,
  size: string,
  format: ThumbnailFormat,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/api/albums/${id}/thumbnail/${size}/${format}`, options);
};

export const getAllAssets = <TData = AxiosResponse<Asset[]>>(
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/api/assets`, options);
};

export const setAssetsHidden = <TData = AxiosResponse<void>>(
  hideAssetsRequest: HideAssetsRequest,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/api/assets/hidden`, hideAssetsRequest, options);
};

export const getAssetFile = <TData = AxiosResponse<string>>(
  id: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/api/assets/original/${id}`, options);
};

export const getImageAssetRepresentation = <TData = AxiosResponse<string>>(
  assetId: AssetId,
  reprId: ImageRepresentationId,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/api/assets/repr/${assetId}/${reprId}`, options);
};

export const setAssetRotationCorrection = <TData = AxiosResponse<void>>(
  setAssetRotationRequest: SetAssetRotationRequest,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/api/assets/rotation`, setAssetRotationRequest, options);
};

export const getThumbnail = <TData = AxiosResponse<string>>(
  id: AssetId,
  size: ThumbnailSize,
  format: ThumbnailFormat,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/api/assets/thumbnail/${id}/${size}/${format}`, options);
};

export const getTimeline = <TData = AxiosResponse<TimelineChunk>>(
  params: GetTimelineParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/api/assets/timeline`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getAsset = <TData = AxiosResponse<Asset>>(
  id: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/api/assets/${id}`, options);
};

export const getAssetDetails = <TData = AxiosResponse<AssetDetailsResponse>>(
  id: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/api/assets/${id}/details`, options);
};

export const getTimelineSections = <TData = AxiosResponse<TimelineSectionsResponse>>(
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/api/timeline/sections`, options);
};

export const getTimelineSegments = <TData = AxiosResponse<TimelineSegmentsResponse>>(
  id: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/api/timeline/sections/${id}`, options);
};

export const createTimelineGroup = <TData = AxiosResponse<CreateTimelineGroupResponse>>(
  createTimelineGroupRequest: CreateTimelineGroupRequest,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/api/timelinegroups`, createTimelineGroupRequest, options);
};

export const addToTimelineGroup = <TData = AxiosResponse<void>>(
  addToTimelineGroupRequest: AddToTimelineGroupRequest,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.put(`/api/timelinegroups`, addToTimelineGroupRequest, options);
};

export type GetAllAlbumsResult = AxiosResponse<Album[]>;
export type CreateAlbumResult = AxiosResponse<CreateAlbumResponse>;
export type GetAlbumDetailsResult = AxiosResponse<AlbumDetailsResponse>;
export type AppendAssetsToAlbumResult = AxiosResponse<AppendAssetsResponse>;
export type DeleteAlbumItemsResult = AxiosResponse<DeleteAlbumItems200>;
export type GetAlbumThumbnailResult = AxiosResponse<string>;
export type GetAllAssetsResult = AxiosResponse<Asset[]>;
export type SetAssetsHiddenResult = AxiosResponse<void>;
export type GetAssetFileResult = AxiosResponse<string>;
export type GetImageAssetRepresentationResult = AxiosResponse<string>;
export type SetAssetRotationCorrectionResult = AxiosResponse<void>;
export type GetThumbnailResult = AxiosResponse<string>;
export type GetTimelineResult = AxiosResponse<TimelineChunk>;
export type GetAssetResult = AxiosResponse<Asset>;
export type GetAssetDetailsResult = AxiosResponse<AssetDetailsResponse>;
export type GetTimelineSectionsResult = AxiosResponse<TimelineSectionsResponse>;
export type GetTimelineSegmentsResult = AxiosResponse<TimelineSegmentsResponse>;
export type CreateTimelineGroupResult = AxiosResponse<CreateTimelineGroupResponse>;
export type AddToTimelineGroupResult = AxiosResponse<void>;
