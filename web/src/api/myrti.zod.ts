/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * myrti
 * OpenAPI spec version: 0.1.0
 */
import { z as zod } from 'zod';

export const getAllAlbumsResponseItem = zod.object({
  changedAt: zod.string().datetime(),
  createdAt: zod.string().datetime(),
  description: zod.string().nullish(),
  id: zod.string(),
  name: zod.string().nullish(),
  numAssets: zod.number(),
});
export const getAllAlbumsResponse = zod.array(getAllAlbumsResponseItem);

export const createAlbumBody = zod.object({
  assets: zod.array(zod.string()),
  description: zod.string().nullish(),
  name: zod.string(),
});

export const createAlbumResponse = zod.object({
  albumId: zod.number(),
});

export const getAlbumDetailsParams = zod.object({
  id: zod.string(),
});

export const getAlbumDetailsResponse = zod.object({
  description: zod.string().nullish(),
  items: zod.array(
    zod
      .object({
        asset: zod
          .object({
            addedAt: zod.string().datetime(),
            assetRootId: zod.string(),
            height: zod.number(),
            id: zod.string(),
            mimeType: zod.string(),
            pathInRoot: zod.string(),
            rotationCorrection: zod.number().nullish(),
            takenDate: zod.string().datetime(),
            width: zod.number(),
          })
          .and(
            zod
              .object({
                representations: zod.array(
                  zod.object({
                    format: zod.string(),
                    height: zod.number(),
                    id: zod.string(),
                    size: zod.number(),
                    width: zod.number(),
                  }),
                ),
              })
              .and(
                zod.object({
                  assetType: zod.enum(['image']),
                }),
              )
              .or(
                zod
                  .object({
                    hasDash: zod.boolean(),
                  })
                  .and(
                    zod.object({
                      assetType: zod.enum(['video']),
                    }),
                  ),
              ),
          )
          .and(zod.object({})),
        itemType: zod.enum(['asset']),
      })
      .or(
        zod.object({
          itemType: zod.enum(['text']),
          text: zod.string(),
        }),
      )
      .and(
        zod.object({
          itemId: zod.string(),
        }),
      ),
  ),
  name: zod.string().nullish(),
});

export const appendAssetsToAlbumParams = zod.object({
  id: zod.string(),
});

export const appendAssetsToAlbumBody = zod.object({
  assetIds: zod.array(zod.string()),
});

export const appendAssetsToAlbumResponse = zod.object({
  success: zod.boolean(),
});

export const deleteAlbumItemsParams = zod.object({
  id: zod.string(),
});

export const deleteAlbumItemsBody = zod.object({
  itemIds: zod.array(zod.string()),
});

export const deleteAlbumItemsResponse = zod.any().nullish();

export const getAlbumThumbnailParams = zod.object({
  id: zod.string(),
  size: zod.string(),
  format: zod.enum(['avif', 'webp']),
});

export const getAllAssetsResponseItem = zod.object({
  addedAt: zod.string().datetime(),
  assetRootId: zod.string(),
  height: zod.number(),
  id: zod.string(),
  mimeType: zod.string(),
  pathInRoot: zod.string(),
  rotationCorrection: zod.number().nullish(),
  takenDate: zod.string().datetime(),
  width: zod.number(),
});
export const getAllAssetsResponse = zod.array(getAllAssetsResponseItem);

export const setAssetsHiddenBody = zod.object({
  assetIds: zod.array(zod.string()),
  what: zod.enum(['hide', 'unhide']),
});

export const getAssetFileParams = zod.object({
  id: zod.string(),
});

export const getImageAssetRepresentationParams = zod.object({
  assetId: zod.string(),
  reprId: zod.string(),
});

export const setAssetRotationCorrectionBody = zod.object({
  rotation: zod.number().nullish(),
});

export const getThumbnailParams = zod.object({
  id: zod.string(),
  size: zod.enum(['small', 'large']),
  format: zod.enum(['avif', 'webp']),
});

export const getTimelineQueryParams = zod.object({
  lastAssetId: zod.string().nullish(),
  maxCount: zod.number(),
  lastFetch: zod.string().nullish(),
});

export const getTimelineResponse = zod.object({
  changedSinceLastFetch: zod.boolean(),
  date: zod.string().datetime(),
  groups: zod.array(
    zod
      .object({
        date: zod.string().date(),
        type: zod.enum(['day']),
      })
      .or(
        zod.object({
          groupEndDate: zod.string().datetime(),
          groupId: zod.string(),
          groupStartDate: zod.string().datetime(),
          groupTitle: zod.string(),
          type: zod.enum(['group']),
        }),
      )
      .and(
        zod.object({
          assets: zod.array(
            zod
              .object({
                addedAt: zod.string().datetime(),
                assetRootId: zod.string(),
                height: zod.number(),
                id: zod.string(),
                mimeType: zod.string(),
                pathInRoot: zod.string(),
                rotationCorrection: zod.number().nullish(),
                takenDate: zod.string().datetime(),
                width: zod.number(),
              })
              .and(
                zod
                  .object({
                    representations: zod.array(
                      zod.object({
                        format: zod.string(),
                        height: zod.number(),
                        id: zod.string(),
                        size: zod.number(),
                        width: zod.number(),
                      }),
                    ),
                  })
                  .and(
                    zod.object({
                      assetType: zod.enum(['image']),
                    }),
                  )
                  .or(
                    zod
                      .object({
                        hasDash: zod.boolean(),
                      })
                      .and(
                        zod.object({
                          assetType: zod.enum(['video']),
                        }),
                      ),
                  ),
              )
              .and(zod.object({})),
          ),
        }),
      ),
  ),
});

export const getAssetParams = zod.object({
  id: zod.string(),
});

export const getAssetResponse = zod.object({
  addedAt: zod.string().datetime(),
  assetRootId: zod.string(),
  height: zod.number(),
  id: zod.string(),
  mimeType: zod.string(),
  pathInRoot: zod.string(),
  rotationCorrection: zod.number().nullish(),
  takenDate: zod.string().datetime(),
  width: zod.number(),
});

export const getAssetDetailsParams = zod.object({
  id: zod.string(),
});

export const getAssetDetailsResponse = zod.object({
  exiftoolOutput: zod.any(),
});

export const createSeriesBody = zod.object({
  assetIds: zod.array(zod.string()),
});

export const createSeriesResponse = zod.object({
  seriesId: zod.string(),
});

export const getTimelineSectionsResponse = zod.object({
  sections: zod.array(
    zod.object({
      avgAspectRatio: zod.number(),
      endDate: zod.string().datetime(),
      id: zod.string(),
      numAssets: zod.number(),
      startDate: zod.string().datetime(),
    }),
  ),
});

export const getTimelineSegmentsParams = zod.object({
  id: zod.string(),
});

export const getTimelineSegmentsResponseSegmentsItemItemsItemSelectionIndicesItemMin = 0;
export const getTimelineSegmentsResponseSegmentsItemItemsItemTotalSizeMin = 0;

export const getTimelineSegmentsResponse = zod.object({
  segments: zod.array(
    zod
      .object({
        end: zod.string().datetime(),
        start: zod.string().datetime(),
        type: zod.enum(['dateRange']),
      })
      .or(
        zod.object({
          id: zod.string(),
          name: zod.string().nullish(),
          type: zod.enum(['userGroup']),
        }),
      )
      .and(
        zod.object({
          items: zod.array(
            zod
              .object({
                addedAt: zod.string().datetime(),
                assetRootId: zod.string(),
                height: zod.number(),
                id: zod.string(),
                mimeType: zod.string(),
                pathInRoot: zod.string(),
                rotationCorrection: zod.number().nullish(),
                takenDate: zod.string().datetime(),
                width: zod.number(),
              })
              .and(
                zod
                  .object({
                    representations: zod.array(
                      zod.object({
                        format: zod.string(),
                        height: zod.number(),
                        id: zod.string(),
                        size: zod.number(),
                        width: zod.number(),
                      }),
                    ),
                  })
                  .and(
                    zod.object({
                      assetType: zod.enum(['image']),
                    }),
                  )
                  .or(
                    zod
                      .object({
                        hasDash: zod.boolean(),
                      })
                      .and(
                        zod.object({
                          assetType: zod.enum(['video']),
                        }),
                      ),
                  ),
              )
              .and(zod.object({}))
              .and(
                zod.object({
                  itemType: zod.enum(['asset']),
                }),
              )
              .or(
                zod.object({
                  assets: zod.array(
                    zod
                      .object({
                        addedAt: zod.string().datetime(),
                        assetRootId: zod.string(),
                        height: zod.number(),
                        id: zod.string(),
                        mimeType: zod.string(),
                        pathInRoot: zod.string(),
                        rotationCorrection: zod.number().nullish(),
                        takenDate: zod.string().datetime(),
                        width: zod.number(),
                      })
                      .and(
                        zod
                          .object({
                            representations: zod.array(
                              zod.object({
                                format: zod.string(),
                                height: zod.number(),
                                id: zod.string(),
                                size: zod.number(),
                                width: zod.number(),
                              }),
                            ),
                          })
                          .and(
                            zod.object({
                              assetType: zod.enum(['image']),
                            }),
                          )
                          .or(
                            zod
                              .object({
                                hasDash: zod.boolean(),
                              })
                              .and(
                                zod.object({
                                  assetType: zod.enum(['video']),
                                }),
                              ),
                          ),
                      )
                      .and(zod.object({})),
                  ),
                  itemType: zod.enum(['assetSeries']),
                  selectionIndices: zod.array(
                    zod
                      .number()
                      .min(getTimelineSegmentsResponseSegmentsItemItemsItemSelectionIndicesItemMin),
                  ),
                  seriesId: zod.string(),
                  totalSize: zod
                    .number()
                    .min(getTimelineSegmentsResponseSegmentsItemItemsItemTotalSizeMin),
                }),
              ),
          ),
          sortDate: zod.string().datetime(),
        }),
      ),
  ),
});

export const createTimelineGroupBody = zod.object({
  assets: zod.array(zod.string()),
  name: zod.string(),
});

export const createTimelineGroupResponse = zod.object({
  displayDate: zod.string().datetime(),
  timelineGroupId: zod.string(),
});

export const addToTimelineGroupBody = zod.object({
  assets: zod.array(zod.string()),
  groupId: zod.string(),
});
